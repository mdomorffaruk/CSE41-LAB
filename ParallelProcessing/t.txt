#include <iostream>
#include <mpi.h>
#include <cstring>

const int MAX_WORD_SIZE = 100;

int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size != 2) {
        if (rank == 0) {
            std::cerr << "This program requires exactly 2 processes." << std::endl;
        }
        MPI_Finalize();
        return 1;
    }

    char word[MAX_WORD_SIZE];

    if (rank == 0) {
        // Sender process
        std::cout << "Enter a word: ";
        std::cin >> word;

        // Synchronous send to the receiver
        MPI_Ssend(word, strlen(word) + 1, MPI_CHAR, 1, 0, MPI_COMM_WORLD);

        // Synchronous receive the modified word from the receiver
        MPI_Recv(word, MAX_WORD_SIZE, MPI_CHAR, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        std::cout << "Received modified word: " << word << std::endl;
    }
    else {
        // Receiver process
        // Synchronous receive the word from the sender
        MPI_Recv(word, MAX_WORD_SIZE, MPI_CHAR, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        // Toggle each letter of the word
        int length = strlen(word);
        for (int i = 0; i < length; ++i) {
            if (isalpha(word[i])) {
                if (islower(word[i])) {
                    word[i] = toupper(word[i]);
                }
                else {
                    word[i] = tolower(word[i]);
                }
            }
        }

        // Synchronous send the modified word back to the sender
        MPI_Ssend(word, strlen(word) + 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}